= ようこそ、プログラミングの世界へ

=={what_is_programming} プログラミングって何？

颯「――――というわけでさ。はーたちにプログラミングのお仕事が舞い込んできたわけだけど」

りあむ「泉ちゃんはともかくとして、なんでぼくなの！？他にもマキノちゃんとか晶葉ちゃんとか、適任な子いたよね！？」

颯「Pちゃん、りあむさんはツッコミ役って言ってた@<fn>{riamu_tsukkomi}」

りあむ「なんだよそれ！……いやまあ、この3人は一緒にお仕事したこともあるし@<fn>{konokoi}。意外と悪くない組み合わせといえばそうなのかも……？」

//footnote[riamu_tsukkomi][マジです。最初は泉と颯の2人だけの予定でした。]
//footnote[konokoi][楽曲「この恋の解を答えなさい」のコミュを参照。]

泉「颯ちゃんは同じ中学生アイドルとして。りあむさんは時に頼れる先輩として。私も相性バッチリだと思うよ。これから楽しく教えられそう」

颯「はーにこんなお仕事が来ると思ってなかったけど、やるからには全力で挑戦しないとねっ。ただ、プログラミング？っていうの、すごい人がパソコンの前でぶわーって文字を打ち込んでるイメージしかなくて、ちょっと不安かも……」

りあむ「真っ暗な部屋でキーボードをダダダーって打ち込んでるやつね、わかるわかる」

颯「実は、プログラミングっていうもの自体あんまりよくわかってないんだよね……。プログラム？とは何が違うの？」

泉「@<kw>{プログラミング, programming}は、コンピュータに対する命令である@<kw>{プログラム, program}を作成することを指す言葉だよ。プログラムが作るもので、プログラミングが作る行為・行動のこと。つまり、これから颯ちゃんとりあむさんと一緒に学んでいくのは、プログラムを作成するための方法、ということになるね」

りあむ「もしかして、@<kw>{プログラマー, programmer}はプログラムを作成する人、つまりプログラミングをする人ってこと？」

泉「大正解！Youtubeで活動している人をYoutuber、っていうのと同じだね」

颯「単語の意味がわかるだけでも、だいぶイメージが掴みやすくなったかもっ！それで、プログラムっていうのは具体的にどういうものなの？」

泉「プログラムはコンピュータへの命令や処理を順序立てて書いたものだよ。もちろんルールにしたがって正確に書く必要はあるけど、誤解を恐れず言うならただの文字(テキスト)だね。例えばこんなものも、今回学ぶPythonで動作する立派なプログラムだよ」

//list[1_add_1][Pythonで動作するプログラムの例]{
    1 + 1
//}

颯「え、これもプログラムなの！？なんか意外！」

泉「プログラミングと聞くとなんだか難しいイメージを持たれがちだけど、プログラムはパソコンでメモ帳を開いて、ささっと作ることもできるんだよ。こう聞くと少しハードルも下がったかな？ちなみに、プログラムとして書かれた文字のことを@<kw>{ソースコード, source code}、あるいは単に@<kw>{コード, code}というから、それも覚えておいてね。コードを書くことを@<kw>{コーディング, coding}と言ったりもするよ」

りあむ「ソースって、調味料のことじゃなくて、出典とか情報源みたいな意味だよね？@<fn>{sauce}よくネットで『ソースは？』って聞かれちゃったりするやつ@<fn>{source}。りあむちゃんもレスバ@<fn>{responce_battle}で何度言われたことか……」

//footnote[sauce][調味料のソースは英語でsauceと書きます。]
//footnote[source][「その情報はどこが出典？」という意味。根拠や情報源が乏しい情報に対してよく見られる返答。]
//footnote[responce_battle][レスポンスバトル、またレスバトルの略。ネット上で繰り広げられる口喧嘩のこと。]

泉「そうだね。私たちはソースコードを書いて、それをプログラムとしてコンピュータに命令して、実行してもらう。この一連の作業をプログラミングということをよく覚えておいてね」

== プログラミング言語

泉「さて、次はプログラムの種類について見ていこう。一言でプログラムと言っても、日本語や英語みたいに様々な種類のもの(言語)が存在するんだ。これらを総称して@<kw>{プログラミング言語, programming language}というよ」

りあむ「今回勉強するのはPythonっていう言語なんだっけ？どんな言語なの？」

泉「@<kw>{Python}は1991年に開発された言語で、2025年2月現在、世界で最も利用されている言語の一つだよ。数値計算や画像処理、今流行りの人工知能(AI)を用いたプログラミングのほか、私たちに身近なものだとYoutubeやInstagram、Spotifyなどの開発にも利用されてたりするんだ」

//image[python_org][Pythonの公式サイト]{
//}

颯「えーすごいすごい！Python、そんなところでも使われてたんだ！もしかして、今回そこまで学べたりしちゃうやつ！？」

泉「あはは、流石にちょっと難しいかな……。とはいえ、Pythonで色んなことができちゃうのは確かだから、今回の勉強で興味が湧いたら調べてみてね」

りあむ「ところでさ、世の中にはPython以外にも色んな言語があるんだよね？なんで今回Pythonをやるの？」

泉「それにはいくつか理由があるんだけど、ここでは特に大きな理由を2つ説明するね」

=== Pythonが初学者向けである理由1: コードのシンプルさ

泉「まずは何と言ってもPythonではコードをシンプルかつ簡単に書けること。例えば以下にC言語@<fn>{c_lang}、@<ruby>{Java, ジャバ}@<fn>{java}という2つの言語とPythonでそれぞれ"Hello, world!"という文字を出力するコードを示してみたんだけど、比べてみてどう？」

//footnote[c_lang][1972年に開発されたプログラミング言語で、登場から半世紀以上経った2025年現在も世界中で広く利用されています。現在主流の言語と比べると仕様がやや難解で、扱うのが少々難しい言語ですが、利用されている分野の広さなどから現在でも多くの人々に学習されています。]
//footnote[java][1996年に開発されたプログラミング言語で、C言語やPython同様非常にメジャーな言語の一つです。名前がよく似たJavaScriptという言語も存在しますが、こちらはJavaと全くの別物で、しばしば『インドとインドネシアくらい違う』『メロンとメロンパンくらい違う』などと形容されます。]

//listnum[c_hello]["Hello, world!"を表示するC言語のプログラム]{
#include<stdio.h>
int main(void){
    print("Hello, world!");
    return 0;
}
//}

//listnum[java_hello]["Hello, world!"を表示するJavaのプログラム]{
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}
//}

//listnum[python_hello]["Hello, world!"を表示するPythonのプログラム]{
print("Hello, world!")
//}

颯「他2つと比べると、Pythonはすごくシンプルかも！」

泉「もう一つ、同じ整数を2回かけた数@<fn>{square_number}を1から9までまとめて1つのデータに入れるコードも比べてみよう@<fn>{data_for_array}。もちろん意味は理解できなくて大丈夫だから、今は文字の多さだけで比較してみて」

//footnote[square_number][このような数を平方数といいます。]
//footnote[data_for_array][C言語とJavaでは配列、Pythonではリストと呼ばれるデータを利用しています。]

#@# 「Pythonのリストについては◯章で解説します。」という文言を入れる

//listnum[c_sum][平方数を列挙するC言語のプログラム]{
#include<stdio.h>
int main(void){
    int square_numbers[9];
    for(int i=1; i<=9; i++){
        square_numbers[i - 1] = i*i;
    }
    return 0;
}
//}

//listnum[java_sum][平方数を列挙するJavaのプログラム]{
public class SquareNumber {
    public static void main(String[] args) {
        int[] square_numbers = new int[9];
        for (int i=1; i<=9; i++) {
            square_numbers[i - 1] = i*i;
        }
    }
}
//}

//listnum[python_sum][平方数を列挙するPythonのプログラム]{
square_numbers = [i*i for i in range(1, 10)]
//}

颯「え、Pythonだとこれもこんなに短く書けちゃうの！？これならはーでもできちゃうかもっ！」

りあむ「ちょいちょいちょい、確かにシンプルなのはわかったんだけどさ、これってどんなコードでもそうなの？特に2つ目の例とか、こう……作為的？というか。わざと短くなる例を選んだんじゃないのって思っちゃうかも……」

泉「りあむさんは鋭いね。1つ目の例は後で紹介する有名なプログラムだけど、2つ目の例についてはわざとPythonだと極端に短く書ける例@<fn>{list_comprehensions}を挙げているから、シンプルなのは当たり前。ただ、それでもPythonでは全体的にコードを簡潔に書ける傾向にあるのは確かで、文法も簡単だから私は初学者向けかなって思う@<fn>{short_code_disadvantage}」

//footnote[list_comprehensions][ここではリスト内包表記という記法を利用しています。リスト内包表記を用いず、C言語やJavaのようにfor文と呼ばれる文を用いて書くこともでき、その場合はもう少しだけコードが長くなります。]

#@# 「(これも◯章で解説します)」という文言を入れる

//footnote[short_code_disadvantage][ただし、書かなくてよいことが多い分、本来初学者が覚えるべき知識がごっそり抜け落ちてしまうリスクも考えられます。本書では、Pythonにおいては中級者以上向けの知識であっても、早い段階で知っておいたほうがよいものについてはなるべく触れる方針としています。]

泉「今回は比較対象としてC言語とJavaを選んだけど、もちろんPythonのようにコードが短く書ける言語は他にもあるよ。今回はわざとコード量の多い言語を選んだわけじゃなく、Pythonと同じくかなりメジャーな言語から抜粋してるからそこは安心してね@<fn>{tiobe_index}」

//footnote[tiobe_index][オランダのTIOBE Software社が毎月発表している、プログラミング言語の人気度を示す指標であるTIOBE Indexでは、それぞれPythonが1位、Javaが3位、C言語が4位に位置づけています(2025年1月現在)。なお、人気度の計算には主にGoogleなどの検索エンジンにおける検索結果が用いられています。]

りあむ「なるほど。メジャーな言語の中だと短い部類ってことか」

泉「あと意外と見落としがちだけど、コードが短く書けるとプログラミングに慣れてきたあとも恩恵があるんだよね。さっと書けるから楽だし、簡単に目を通せるからね」

=== Pythonが初学者向けである理由2: インデントが意味を持つ

泉「続いて2つ目の理由は、@<kw>{インデント, indentation}が意味を持つこと。インデントは日本語で字下げともいうんだけど、どういうものかは図を見てもらったほうが早いと思う」

//image[indentation][インデントの例]{
//}

泉「このように、行の先頭(行頭)に空白を設けて他の行より後ろから書き始めることをインデントと言うんだ」

颯「インデントっていう言葉は初めて聞いたけど、色んなところで見かける書き方かも！でも、『インデントが意味を持つ』ってどういうこと？」

泉「例えば、さっき紹介したC言語やJavaはインデントにとりわけ意味はなくて、行頭に空白を入れても入れなくても見た目が変わるだけで動作に変わりはないの。それに対してPythonは処理の区切りやまとまりをインデントで表現する言語で、言い方を変えると『インデントを理解しないとコードが書けない』言語であるとも言えるんだよ@<fn>{off_side_rule}」

//footnote[off_side_rule][プログラミング言語が持つこのような規則を@<kw>{オフサイドルール, off-side rule}といいます。]

颯「え？それってなんだか難しそうじゃない？インデントを使うも使わないも自由なほうが楽な気もしちゃうなー」

泉「ところがそういうわけにもいかないんだ。さっき見てもらったコード、覚えてる？」

りあむ「あっ、よく見たらC言語でもJavaでもインデントが使われてるじゃん！」

泉「気付いた？実はPythonに限らず、どの言語でもコードをより読みやすくするためにインデントはごく当たり前に利用されているんだ。そして、そのルールはだいたい決まってて、『ここで字下げするのが普通』っていう暗黙の了解みたいなものがあるの@<fn>{some_indentation}。ただ、インデントが自由な言語ではそこから外れても問題ないから、結果的に慣れてない人が書くとコードがガタガタになっちゃうこともある。一方、Pythonではそもそも正確に字下げしないとエラーになっちゃうから、慣れるのにもってこいってことだね」

//footnote[some_indentation][その中にもいくつか派閥(流派)があり、根深い論争を巻き起こすことがしばしばあります。このことから、決まった書き方しかできないPythonは楽という考え方もあります(ただし、()を使うとその中には自由に空白を入れられます)。]

//listnum[c_sum_lack_coherence][C言語ではインデントが適当でも問題なく動く]{
#include<stdio.h>
	int main(void){
int square_numbers[9];
		for(int i=1; i<=9; i++){
    square_numbers[i - 1] = i*i;
    }
    	return 0;
	}
//}

りあむ「いや、流石にこんな適当に書く人はいないと思うけど……。まあ、慣れないぼくたちにとっては、決められた書き方に添えてなかったらエラーって言ってくれたほうがいいのかもね」

泉「ここまで2人には『初学者向きである』という目線でPythonの利点を伝えてきたけど、もちろん初めて触れる言語としてPythonを選ばないほうがいい理由だってある。そして、慣れてきてからもメリット、デメリットともに色々見えてくると思う。一つ覚えていてほしいのは、どの言語にもこういった側面があるということ。ある言語では簡単にできる処理が他の言語ではすごく難しいっていう状況は往々にあるし、簡単にできたかと思えば処理にやたら時間がかかったりすることだってある。この言語さえマスターすれば十分、この言語さえあれば他に何もいらない、なんてことはもちろんない。今回は学びやすさの観点からPythonを選んだけど、他にも世の中にはたくさんの素敵な言語があるから、興味を持ったらぜひ学習してほしいかなって思う」

== プログラミングのはじめかた

=== 最大の壁、環境構築

泉「今回はGoogle社が提供しているGoogle Colaboratoryを利用して学習を進めていくよ。Google ColaboratoryはJupyter NotebookというWebアプリケーションをクラウド上で利用できるようにした……」

颯「うわ、英語ばっかで急にわけわかんなくなっちゃった！泉ちゃん、もう少しゆっくり！」

泉「ごめんごめん、順を追って説明するね。まず、@<hd>{what_is_programming}節でプログラムの正体はただの文字だっていう話をしたと思うんだけど、それらをいきなりPythonのコードとして実行できるわけじゃなく、別途実行するための環境(開発を行う作業場)を準備しなくちゃならないんだ。大前提としてPythonそのものを用意するのはもちろん、コードを書くためのテキストエディタ@<fn>{editor}やIDE@<fn>{IDE}といったツールを揃えたり、場合によっては仮想環境@<fn>{virtual_environment}と呼ばれる環境を別途用意したりと、準備しなくちゃならないことはたくさんあるの。こういった準備のことを@<kw>{環境構築}といって、私たちがプログラミングを始める上で最初にして最大の難関って言う人もいるくらいだね」

//footnote[editor][文字(テキスト)を編集するためのソフトウェアです。Windowsであれば「メモ帳」が特に有名かと思います。]
//footnote[IDE][Integrated Development Environmentの略で、日本語では@<kw>{統合開発環境}といいます。ソフトウェア開発に必要なツールが一式揃った環境のことを指します。]
//footnote[virtual_environment][ハードウェア(PC本体などの物理的な機械)の中で仮想的に構築した環境のことを指します。Pythonにおいては、仮想環境を構築することで、複数のバージョンのPythonを1台のPCで同時に利用できるなどのメリットがあります。]

りあむ「プログラミングを学ぶ前から色々なことを知ってないといけないのか……ぼくたち初学者にはハードルが高いかも……」

泉「純粋なプログラミングとは必要な知識が異なるし、ゆくゆくは知っておきたいことではあるんだけどね。『まずはお試しで遊んでみたい！』っていうモチベーションの人にとっては高いハードルだし、特に独学で始めた人が先に進めなくなって挫折しちゃう原因の一つなんだ。学校やプログラミングスクールのようなサポートが手厚い環境であれば、プログラミングの準備が整うまで手伝ってもらうこともできるんだけど、なかなか難しいよね……」

泉「そこで登場するのが@<kw>{Jupyter Notebook}@<fn>{jupyter_ruby}というアプリケーション。これはMicrosoft EdgeやGoogle ChromeのようなWebブラウザで扱うことができて、直感的にプログラミングを行うことができるんだ@<fn>{jupyter_support_lang}。」

//footnote[jupyter_ruby][ジュピターノートブックなどと読みます。SideMでおなじみJupiter(木星)とよく似たつづりですが、よく見ると"Py"thonの要素が垣間見えますね。ちなみに、Jupyterがサポートしている主要な言語として他にJulia(ジュリア)とRという言語があり、それらの要素も含まれています(Julia+Python+RでJupyter, というわけですね)。]
//footnote[jupyter_support_lang][かつてはIPython Notebookという名前で、文字通りPythonのための環境でしたが、現在では様々な言語が利用可能です。]

//image[jupyter_notebook][Jupyter Notebook(ブラウザ版)@<fn>{jupyter_notebook_for_browser}]{
//}

//footnote[jupyter_notebook_for_browser][@<href>{https://jupyter.org/try-jupyter/notebooks/?path=notebooks/Intro.ipynb}]

りあむ「Webブラウザって普段からググったり@<fn>{google}するときに使うやつだよね？そのJupyter Notebookっていうのを使えば、さっき言ってた環境構築っていうのをしなくてもプログラミングできちゃうって感じ？」

//footnote[google][インターネット検索サイトのGoogleで検索すること(転じて、他の検索エンジンで検索することにも用いられる)。この本の読者ならおおよそ知ってそうですね。]

泉「残念ながらJupyter Notebookを利用する場合であっても環境構築は必要なんだ。というのも、Jupyter NotebookはWebブラウザで動作こそすれど、結局自分のPCにインストールしないと利用できないものだから。裏を返せばインターネットに接続していなくても使えちゃう、ってことでもあるんだけどね……。一応Webブラウザからインストールなしにアクセスできるブラウザ版のJupyter Notebookもあるにはあるけど、実験的なアプリケーションって立ち位置だね」

りあむ「あ！りあむちゃんわかっちゃったぞ！ここで最初に話してたGoogleほにゃららっていうのが出てくるんだな！？」

泉「その通り！Googleが提供する@<kw>{Google Colaboratory}、通称@<kw>{Colab}はJupyter Notebookをベースに開発されたサービスで、Googleのアカウントさえ持っていれば利用可能なんだ。インストールも不要で、Webブラウザからアクセスするだけでいいから、初学者にはもってこいだね」

颯「やっとはーでもできる希望が見えてきたっ！」

==={first_colab} Google Colaboratory

泉「じゃあ、さっそくColabにアクセスしてみよう！まずはGoogle等の検索エンジンで google colab と検索してみよう。『Colaboratoryへようこそ』っていうページが出てきたかな？@<fn>{colab_url}」

//footnote[colab_url][出てこない場合は、@<href>{https://colab.research.google.com/drive/}からアクセスできます。]

//image[colab_01][Googleで google colab と検索した例]{
//}

颯「出てきた！これをクリックすればいいの？」

泉「うん。そうすると、『Colabへようこそ』と書かれた画面に遷移するんだけど、これはColabのチュートリアルだね。そこに一通り目を通してもいいんだけど、初めてだと何が書いてあるかわからないと思うから、ここでは先に進めるね。次に、左上の『ファイル』から、『ドライブの新しいノートブック』をクリックしてもらえるかな？Colabで実際に編集するファイルのことを@<kw>{ノートブック}というんだけど、今からそれを作っていくよ」

//image[colab_02][Colabのチュートリアル画面]{
//}

//image[colab_03][ノートブックを新規作成する]{
//}

泉「いま、画面の上のほうに『コーディングを開始するか、AIで生成します。』と書かれた四角い入力画面が出ているかな？もし出てなかったら、画面の左上にある『+ コード』と書かれている部分をクリックしてみて。こうして挿入した領域を@<kw>{セル}というんだ。特に、『+ コード』をクリックして挿入するのがコードを書くための@<kw>{コードセル}、対して『+ テキスト』をクリックして挿入するのが単なる文字を書くための@<kw>{テキストセル}。今回はコードセルにコードを書いていくよ」

//image[colab_04][コードセルを挿入する]{
//}

泉「2人に最初に入力してもらうコードはこちら！」

//listnum[python_first_hello][Hello, world!と表示するプログラム]{
print("Hello, world!")
//}

颯「ハロー・ワールドってさっきも見たかも！こんにちは、世界、って意味？」

泉「そんなところかな。@<kw>{Hello world}は半世紀ほども前から知られている一文で、多くの入門書でまず最初に『この文章を出力(表示)すること』がプログラムの例として挙げられているんだ」

りあむ「じゃあ、@<code>{print}っていうのでHello, world!って文字を出力してるってこと？」

泉「その通り！詳しくは後々順を追って説明するから、まずはセルの中にキーボードで入力してみよう。カンマ『@<code>{,}』の後にスペースを入れるかどうかはお好みで。できたかな？」

//image[colab_05][@<code>{print("Hello, world!")}と入力する]{
//}

颯「あれ？泉ちゃん、『@<code>{()}』や『@<code>{"}』、それに『@<code>{!}』ってどうやって打つの？」

泉「キーボードの左下のほうにある、Shiftと書かれたキー(Shiftキー)を探してみて。『@<code>{(}』はこのShiftキーを押しながら、キーボードの上のほうにある『ゆ』と書かれたキーを押すと入力できるよ@<fn>{jis_keyboard}@<fn>{shift_key}。このとき、『@<code>{(}』を入力すると自動的に『@<code>{)}』も挿入されるはず@<fn>{closing_parenthesis}。同様に、『@<code>{"}』はShiftキーを押しながら『ふ』と書かれたキーを、『@<code>{!}』はShiftキーを押しながら『ぬ』と書かれたキーを押すと入力できるよ(いずれも@<table>{sign_table})。『@<code>{"}』はあまり馴染みがないかもしれないけど、@<kw>{ダブルクォーテーション}(または@<kw>{ダブルクォート})っていって、今後頻繁に出てくることになるから覚えておいてね」

//footnote[jis_keyboard][本書ではJIS配列と呼ばれる配列(配置)を採用した、日本で最も一般的なキーボードを対象としています(あえてそのようなキーボードを購入していない限り、皆さんが使用しているキーボードはJIS配列なのでご安心ください)。もしUS配列などの異なるキーボードをお持ちの方は各自で検索ください。また、まれにJIS配列であってもひらがなが印字されていないキーボードもありますが、以降の解説ではひらがなが印字されているキーボードを前提とします。]
//footnote[shift_key][Shiftキーと@<b>{同時押しでない}ことに注意してください。先にShiftキーだけを押した状態で、続けて「ゆ」や「よ」を押す必要があります。]
//footnote[closing_parenthesis][もし誤って「@<code>{)}」を消してしまった場合、Shiftキーを押しながら「よ」と書かれたキーを押すと入力できます。もしくは、もう一度「@<code>{(}」から入力し直しても構いません。]

//table[sign_table][記号の入力方法]{
記号	入力方法
------------
@<code>{(}	Shiftキーを押しながら「ゆ」と書かれたキーを押す
@<code>{)}	Shiftキーを押しながら「よ」と書かれたキーを押す
@<code>{"}	Shiftキーを押しながら「ふ」と書かれたキーを押す
@<code>{!}	Shiftキーを押しながら「ぬ」と書かれたキーを押す
//}

颯「できた！泉ちゃん、ありがとう！」

泉「りあむさんも入力できた？入力が終わったら、セルの左側にある▶ボタンを押すか、キーボードの左下にある@<ruby>{Ctrl, コントロール}と書かれたキー(Ctrlキー)を押しながらEnterキーを押してみよう@<fn>{colab_execution}。どうなった？」

//footnote[colab_execution][CtrlキーとEnterキーを押して実行する場合、実行したいセルを選択している必要があります。]

//image[colab_06][正しくHello, world!と表示された例]{
//}

颯「出た！Hello, world!って表示されてる！」

泉「おめでとう、それが記念すべき颯ちゃんの最初のプログラムだね。ようこそ、プログラミングの世界へ！」

りあむ「まって。なんかぼくのは全然違う感じなんだけど。これ絶対あってないよね？ね？？？」

//image[colab_07][誤って全角のダブルクォーテーションを入力してしまった例]{
//}

泉「あ、りあむさん。ダブルクォーテーションが全角文字になっちゃってる。多くのプログラミング言語では、原則全角文字は使わないんだ。後で例外も出てくるけど、基本的には半角モードに切り替えて入力するようにしてね。これでどうかな？」

//image[change_half_width_mode][半角モードで文字を入力する必要がある]{
//}

りあむ「が～～～！！！またなんか出てきた！今度はなんなんだよう！」

//image[colab_08][誤ってシングルクォーテーションを2つ並べて入力してしまった例]{
//}

泉「うーん、今度はちゃんと打ててるように見えたんだけど……あっ、これもしかして『@<code>{'}』(@<kw>{シングルクォーテーション}(または@<kw>{シングルクォート}))を2個並べて『@<code>{''}』って打った？全角でも半角でも、Shiftキーを押しながら『ふ』を押す、は変わらないよ。正しく入力できたら、Hello, world!って文字の色が変わるはず」

りあむ「できた！！！……できたんだけど、これ、もしかして前途多難ってやつ！？なんか思ったより難しくない！？ぴえん！」

泉「私もこれまで何度か、プログラミングが初めてっていう人に教えたことがあるんだけど、文字を打つのって意外と難しいんだよね……こんなふうに、思わぬところでつまづいちゃいがちなんだ。というわけで、次のレッスンは『キーボードの使い方』！一見遠回りかもだけど、正しく文字を入力できないとプログラミングは始まらない。この機会に、まとめて勉強しちゃおう！」
